name: Issue Comment Automation  
  
# 触发条件：当仓库中有新的issue被创建时  
on:  
  issues:  
    types: [opened]  
  
jobs:  
  send-issue-content:  
    runs-on: ubuntu-latest  
    steps:  
      # 检出仓库代码（虽然在这个例子中我们实际上不需要它）  
      - name: Checkout repository  
        uses: actions/checkout@v2  
  
      # 获取新创建的issue的详细信息  
      - name: Get issue details  
        id: issue  
        uses: octokit/request-action@v0.6.0  
        with:  
          route: GET /repos/:repository/issues/:issue_id  
          repository: ${{ github.repository }}  
          issue_id: ${{ github.event.issue.id }}  
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
  
      # 将issue的内容发送到特定的外部URL，并设置超时时间为3分钟  
      - name: Send issue content to external URL  
        id: send_request  
        uses: peter-evans/http-request@v1.0.0  
        with:  
          url: 'http://47.120.64.144:8080/github-issue' # 替换为你的实际URL  
          method: 'POST'  
          body: '{"title":"${{ github.event.issue.title }}", "body":"${{ github.event.issue.body }}"}'  
          headers: '{"Content-Type": "application/json"}'  
          timeout: 180 # 设置超时时间为180秒（3分钟）  
  
      # 如果请求成功，将外部服务的响应作为评论添加到issue上  
      - name: Comment on issue with response  
        if: steps.send_request.outputs.status_code == 200  
        uses: peter-evans/create-or-update-comment@v1  
        with:  
          issue-number: ${{ github.event.issue.number }}  
          body: |  
            Response from external service:  
            ```  
            ${{ steps.send_request.outputs.response_body }}  
            ```  
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
  
      # 如果请求失败（例如超时或网络错误），可以选择添加一个错误评论  
      - name: Comment on issue with error  
        if: steps.send_request.outputs.status_code != 200  
        uses: peter-evans/create-or-update-comment@v1  
        with:  
          issue-number: ${{ github.event.issue.number }}  
          body: |  
            Failed to get response from external service. Status code: ${{ steps.send_request.outputs.status_code }}  
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
